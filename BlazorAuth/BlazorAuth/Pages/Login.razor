@page "/login"
@using BlazorAuth.Authentication;

@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject AuditService AuditService
@inject NavigationManager navManager
@using BlazorAuth.Services
@inject LdapAuthenticationService ldapAuthService

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName {get; set;}
        public string Password {get; set;}
    }
    private Model model = new Model();


    private async Task Authenticate()
    {
        bool isAuthenticated = ldapAuthService.Authenticate(model.UserName, model.Password);
        if (isAuthenticated)
        {
            
            var roles = ldapAuthService.GetUserRoles(model.UserName);
            await ProceedWithLogin(model.UserName, roles);
            return;
        }

    
        await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
    }

    private async Task ProceedWithLogin(string userName, IEnumerable<string> roles)
    {
        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userName,
            Roles = roles.ToList() 
        });

        navManager.NavigateTo("/", true);
    }
}
}